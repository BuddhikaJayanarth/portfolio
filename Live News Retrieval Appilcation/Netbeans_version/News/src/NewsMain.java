
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TimerTask;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ADMIN
 */
public class NewsMain extends javax.swing.JFrame {


    
    
    /**
     * Creates new form NewsMain
     */
    public NewsMain() {
        initComponents();    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppTitle = new javax.swing.JLabel();
        clockdisplay = new javax.swing.JLabel();
        NewsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        HeadlineList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        UpdatePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DownloadingList = new javax.swing.JList<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LoadedList = new javax.swing.JList<>();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AppTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AppTitle.setText("News Headlines Viewer");
        AppTitle.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        clockdisplay.setText("datetimeclock");

        HeadlineList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Retrieving Headlines" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(HeadlineList);

        jLabel1.setText("Headlines");

        UpdateButton.setText("Update Headlines");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NewsPanelLayout = new javax.swing.GroupLayout(NewsPanel);
        NewsPanel.setLayout(NewsPanelLayout);
        NewsPanelLayout.setHorizontalGroup(
            NewsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NewsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(NewsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(UpdateButton)))
                .addContainerGap())
        );
        NewsPanelLayout.setVerticalGroup(
            NewsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdateButton))
        );

        jLabel2.setText("Currently Downloading from");

        DownloadingList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "No downloads" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(DownloadingList);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setText("Loaded Plugins");

        LoadedList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Loading Plugins" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(LoadedList);

        CancelButton.setText("Cancel Downloads");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdatePanelLayout = new javax.swing.GroupLayout(UpdatePanel);
        UpdatePanel.setLayout(UpdatePanelLayout);
        UpdatePanelLayout.setHorizontalGroup(
            UpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CancelButton))
                .addGap(10, 10, 10)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdatePanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel3)
                        .addContainerGap(309, Short.MAX_VALUE))
                    .addComponent(jScrollPane3)))
        );
        UpdatePanelLayout.setVerticalGroup(
            UpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpdatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdatePanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(UpdatePanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(UpdatePanelLayout.createSequentialGroup()
                .addComponent(jSeparator2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UpdatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(NewsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clockdisplay)
                        .addGap(104, 104, 104)
                        .addComponent(AppTitle)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AppTitle)
                    .addComponent(clockdisplay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NewsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(UpdatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
     
        //take all ongoing timertasks and cancel them then restart them with a new timer 
        for(Map.Entry<NewsPlugin, java.util.Timer> hash : ongoingtasksdata.entrySet()) {   
            
            //clearing currently downloading jlist
            DefaultListModel<String> downloadingmodel1 = new DefaultListModel<String>();
            this.DownloadingList.setModel(downloadingmodel1);     
            this.DownloadingList.setSelectedIndex(0);
            
            //rollback the headlines jlist to backup headline arraylist
            masterlist= masterlistbackup;
            DefaultListModel<String> headingsmodel = new DefaultListModel<String>();
            for(int i = masterlist.size() - 1; i>=0; i--){
                String[] headingextract= masterlist.get(i);
                headingsmodel.addElement(headingextract[0]+headingextract[1]+headingextract[2]+headingextract[3]+headingextract[4]+headingextract[5]+headingextract[6]);
            }    
            HeadlineList.setModel(headingsmodel);     
            HeadlineList.setSelectedIndex(0);
            
            NewsPlugin pluginhashvalue = hash.getKey();
            java.util.Timer hashtimer = hash.getValue();
         
            hashtimer.cancel();
            hashtimer.purge();
         
            long delay= pluginhashvalue.GetDelay();
            
            String downloadname = pluginhashvalue.GetName();
            //updating the "cuurently downloading from" jlist
            this.downloadlist = new ArrayList<String>();
            this.downloadlist.add(downloadname);
                for(int i = this.downloadlist.size() - 1; i>=0; i--){
                    String downloadsite= this.downloadlist.get(i);
                    downloadingmodel1.addElement(downloadsite);
                }
            this.DownloadingList.setModel(downloadingmodel1);     
            this.DownloadingList.setSelectedIndex(0);
            System.out.println(downloadname);
            
            final Callable calledplugin = (Callable) pluginhashvalue;
            TimerTask plugintimertask = new TimerTask() {
            @Override
                public void run() {
                
                    try {
                        
                        List<String[]> innerincomingHeadingsList = (List<String[]>)calledplugin.call();
                        
                        updatelist(innerincomingHeadingsList);

                    } 
                    catch (Exception ex) {
                        Logger.getLogger(pluginscheduler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                }
        
            };
            System.out.println(delay);
            ps = new pluginscheduler();
            java.util.Timer startedtimer = ps.schedule(pluginhashvalue, plugintimertask, delay);

        }
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed

        for(Map.Entry<String, NewsPlugin> hash : plugindata.entrySet()) {
            
            NewsPlugin pluginhashvalue = hash.getValue();
            
            String downloadname = pluginhashvalue.GetName();
            long delay = 0;
            //updating the "cuurently downloading from" jlist
            this.downloadlist.add(downloadname);
            DefaultListModel<String> downloadingmodel = new DefaultListModel<String>();
                for(int i = this.downloadlist.size() - 1; i>=0; i--){
                    String downloadsite= this.downloadlist.get(i);
                    downloadingmodel.addElement(downloadsite);
                }
            this.DownloadingList.setModel(downloadingmodel);     
            this.DownloadingList.setSelectedIndex(0);
            System.out.println(downloadname);
            
            final Callable calledplugin = (Callable) pluginhashvalue;
            TimerTask plugintimertask = new TimerTask() {
            @Override
                public void run() {
                
                    try {
                        
                        List<String[]> innerincomingHeadingsList = (List<String[]>)calledplugin.call();
                        
                        updatelist(innerincomingHeadingsList);

                    } 
                    catch (Exception ex) {
                        Logger.getLogger(pluginscheduler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                }
        
            };
            java.util.Timer onetimetimer = new java.util.Timer();
            onetimetimer.schedule(plugintimertask, delay);
            
            
        }
        
    }//GEN-LAST:event_UpdateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewsMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        NewsMain news = new NewsMain();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                news.setVisible(true);
                
            }
        });
        
        String test = "C:/Users/ADMIN/Documents/NetBeansProjects/News/build/classes/bbcPlugin.class";
        try{            
        news.startitall(args);
        }
        catch(Exception e){
            throw new ClassNotFoundException(String.format("Could not startitall : %s", e.getMessage()),e);
        }

        
    }

    //Class Variables
    private NewsPlugin np;
    private pluginscheduler ps = new pluginscheduler();
    private NewsPluginLoader npl = new NewsPluginLoader();
    private Map<String, NewsPlugin> plugindata = new HashMap<String, NewsPlugin>();//contains all the dynamincally created plugin objects
    private Map<NewsPlugin, java.util.Timer> ongoingtasksdata = new HashMap<NewsPlugin, java.util.Timer>();//contains all the dynamincally created plugin objects
    private Map<String, pluginscheduler> schedulerdata = new HashMap<String, pluginscheduler>();//contains all the dynamincally created scheduler objects
    private NewsMain n;
    private List<String> LoadedPluginsArrayList = new ArrayList<String>();
    public List<String[]> masterlist = Collections.synchronizedList(new ArrayList<String[]>());
    public List<String[]> masterlistbackup = Collections.synchronizedList(new ArrayList<String[]>());
    public List<String> downloadlist = new ArrayList<String>();
    
    //method to start all required startup methods
    private void startitall(String args[]) throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException {
        
        this.clock();
        
        this.createhashmap(args);
        
        //start each plugin's scheduler
        this.starttimedtasks();
    }
    
    //this method populates hashmap of all plugin objects instantiated
    public void createhashmap(String args[]) throws ClassNotFoundException, IOException, InstantiationException, IllegalAccessException {

        //stores objects of the plugins named in command line arguments in a hashmap
        for(int x=0; x<args.length; x++){
            plugindata.put(args[x], npl.loadPlugin(args[x])); 
        }
        
        //for each plugin object create a scheduler object and store in a hashmap.
        for(Map.Entry<String, NewsPlugin> hash : plugindata.entrySet()) {
            //String pluginhashkey = hash.getKey();
            NewsPlugin pluginhashvalue = hash.getValue();
            //np = plugindata.get(hashkey);
            
            String pluginname = pluginhashvalue.GetName();
            String schedulerkey = pluginname;
            String schedulerobjectname = pluginname+"Scheduler";
            
            //referencing https://stackoverflow.com/questions/9886266/is-there-a-way-to-instantiate-a-class-by-name-in-java
            //Class<?> schedulerclass = Class.forName(schedulerobjectname);
            //schedulerdata.put(schedulerkey, (pluginscheduler)schedulerclass.newInstance()); 
            
            //displays all the plugins
            LoadedPluginsArrayList.add(pluginname);
                    
        }
        
        //populate the Loaded Plugins List with the name of the plugins
        DefaultListModel<String> loadedmodel = new DefaultListModel<String>();
        for(String plugin : LoadedPluginsArrayList){
            loadedmodel.addElement(plugin);
        }    
        LoadedList.setModel(loadedmodel);     
        LoadedList.setSelectedIndex(0);
        	
    }
    
    //starts the timed tasks for each plugin        
    public void starttimedtasks(){
        
        for(Map.Entry<String, NewsPlugin> hash : plugindata.entrySet()) {
            
            long delay= 0;
            NewsPlugin pluginhashvalue = hash.getValue();
            
            String downloadname = pluginhashvalue.GetName();
            //updating the "cuurently downloading from" jlist
            this.downloadlist.add(downloadname);
            DefaultListModel<String> downloadingmodel = new DefaultListModel<String>();
                for(int i = this.downloadlist.size() - 1; i>=0; i--){
                    String downloadsite= this.downloadlist.get(i);
                    downloadingmodel.addElement(downloadsite);
                }
            this.DownloadingList.setModel(downloadingmodel);     
            this.DownloadingList.setSelectedIndex(0);
            System.out.println(downloadname);
            
            final Callable calledplugin = (Callable) pluginhashvalue;
            TimerTask plugintimertask = new TimerTask() {
            @Override
                public void run() {
                
                    try {
                        
                        List<String[]> innerincomingHeadingsList = (List<String[]>)calledplugin.call();
                        
                        updatelist(innerincomingHeadingsList);

                    } 
                    catch (Exception ex) {
                        Logger.getLogger(pluginscheduler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
                }
        
            };
            java.util.Timer startedtimer = ps.schedule(pluginhashvalue, plugintimertask, delay);
            
            //storing this ongoing task in a map so we can cancel it if needed
            ongoingtasksdata.put(pluginhashvalue, startedtimer); 


        }
        
    }

    //updates master list with newly downloaded headlines and removes outdated headlines
    public synchronized void updatelist(List<String[]> incoming) throws InterruptedException{
        
        masterlistbackup = masterlist;
        
        boolean outdated = true;
        boolean correctplugin = false;
        boolean notavailable = true;
        String[] downloadnamearray = incoming.get(1);
        String downloadname = downloadnamearray[1];
        

        
        List<String[]> thisincoming= incoming;
        //synchronized (masterlist) {
        //check if any already available masterlist headlines are present in incoming list. if so remove from incoming list
        //if old masterlist headline doesnt exist in incoming list it is outdated and thus removed
        int x=0;
        while(x < masterlist.size()){    
            outdated = true;
            correctplugin = false;
            String[] oldhead = masterlist.get(x);
            
            int y = 0;
            while(y < thisincoming.size()){
               String[] newhead = thisincoming.get(y);
               downloadname = newhead[1];
               
                if(oldhead[1].equals(newhead[1])){
                   correctplugin=true;
                       
                    if(oldhead[3].equals(newhead[3])){
                       outdated = false;
                       thisincoming.remove(y);
                       y--; 
                    }
                }
                y++;
            }
            
            if(outdated && correctplugin){
                masterlist.remove(oldhead);
                //System.out.println("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO");

                x--;
            }
        x++;
	}
        //}
        
        //check if headline in incoming list is not available in master list. if so add it to masterlist
        for (String[] newhead : thisincoming){ 
            
            notavailable = true;
            
            for (String[] oldhead : masterlist){
               
               if(oldhead[1].equals(newhead[1])){
                   
                   if(oldhead[3].equals(newhead[3])){
                       
                       notavailable = false;
                       
                   }
               }
                
            }
            
            if(notavailable){
                masterlist.add(newhead);
            }
        
	}
        

        
        //display updated master list in the jlist
        DefaultListModel<String> headingsmodel = new DefaultListModel<String>();
        for(int i = masterlist.size() - 1; i>=0; i--){
            String[] headingextract= masterlist.get(i);
            headingsmodel.addElement(headingextract[0]+headingextract[1]+headingextract[2]+headingextract[3]+headingextract[4]+headingextract[5]+headingextract[6]);
        }    
        HeadlineList.setModel(headingsmodel);     
        HeadlineList.setSelectedIndex(0);
        
        //updating the "currently downloading from" jlist after removing the downloading site
        while(this.downloadlist.remove(downloadname)){}
        DefaultListModel<String> downloadingmodel = new DefaultListModel<String>();
        for(int i = this.downloadlist.size() - 1; i>=0; i--){
            String downloadsite= this.downloadlist.get(i);
            downloadingmodel.addElement(downloadsite);
        }
        this.DownloadingList.setModel(downloadingmodel);     
        this.DownloadingList.setSelectedIndex(0);

        
    }
    
    //starts clock
    public void clock() throws ClassNotFoundException{
        

        
        //updates jLabel displayclock every second to show current system time
        updateclock();
        new javax.swing.Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                updateclock();
            }
        }).start();
        
    }
    
    //method: updates jLabel displayclock every second to show current system time
    public void updateclock(){

        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm a");
        this.clockdisplay.setText("Date and Time: "+df.format(new Date()));
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AppTitle;
    private javax.swing.JButton CancelButton;
    private javax.swing.JList<String> DownloadingList;
    private javax.swing.JList<String> HeadlineList;
    private javax.swing.JList<String> LoadedList;
    private javax.swing.JPanel NewsPanel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JPanel UpdatePanel;
    private javax.swing.JLabel clockdisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    private void test() throws MalformedURLException, IOException {

        //referenced from assignment specs    
        URL url = new URL("https://arstechnica.com/");        
        try(ReadableByteChannel chan = Channels.newChannel(url.openStream())){
            
            File deletefile = new File("bbc.html");
            if(deletefile.delete()){
                System.out.println("old bbc.html deleted");
            }
        
            File file = new File("bbc.html");
            
            //referenced from https://stackoverflow.com/questions/14911127/java-doesnt-download-full-file
            long channel = new FileOutputStream(file, false).getChannel().transferFrom(chan, 0, Long.MAX_VALUE);

        }
        
        parsehtml();


    }

    //extracts the correct headers from the html document
    private void parsehtml() throws IOException {
        
        File downloadedhtml = new File("bbc.html");
        Document parseddoc = Jsoup.parse(downloadedhtml, null);
        Elements headingelements = parseddoc.select("h1.heading");
        List<String> HeadingsList = new ArrayList<String>();
        for (Element heading : headingelements) {
            String theheading = heading.text();
            System.out.println(theheading);
            HeadingsList.add(theheading);
        }
    }

}



